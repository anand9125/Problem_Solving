classMinStack {
    // Stack<Integer> s ;
    // Stack<Integer>min;

    // public MinStack() {
    //     s = new Stack<Integer>();
    //     min= new Stack<Integer>();
        
    // }
    
    // public void push(int val) {
    //     s.push(val);
    //     if(min.isEmpty() || min.peek()>=s.peek()){
    //       min.push(val)  ;
    //     }  
    // }
    
    // public void pop() {
    //     if(!s.isEmpty()){
    //      int val = s.pop();
    //      if(min.peek()==val){
    //         min.pop();
    //      }
    //     }
         
    // }
    
    // public int top() {
    //     if(s.isEmpty())
    //     return -1;
    //      return s.peek();
    // }
    
    // public int getMin() {
    //       if(s.isEmpty())
    //     return -1;
    //       return min.peek();
        
        int min;
        Stack<Integer>st;
        public MinStack(){
            min=Integer.MAX_VALUE;
            st=new Stack<>();
        }
         public void push(int val) {
               if(val<=min){
                st.push(min);
                min=val;
               }
               st.push(val);
         }
         public void pop(){
           if(st.pop()==min) {
            min=st.pop();
           }
         }
         public int top(){
            return st.peek();
         }
          public int getMin(){
            return min;
          }

    }

